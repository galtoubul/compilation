/*************/
/* IMPORT(S) */
/*************/
import java_cup.runtime.*;
import AST.*;

parser code 
{:
	public Lexer lexer;

	public Parser(Lexer lexer)
	{
		super(lexer);
		this.lexer = lexer;
	}
	public void report_error(String message, Object info)
	{
		System.out.print("ERROR >> ");		
		System.out.print("[");
		System.out.print(lexer.getLine());
		System.out.print(":");
		System.out.print(lexer.getCharPos());
		System.out.print("] ");		
		System.exit(0);
	}
:}

/************************/
/* CUSTOMIZE CUP PARSER */
/************************/
scan with
{:
	Symbol s;
	s = lexer.next_token();
	//System.out.print(s.sym);
	System.out.print("[");
	System.out.print(lexer.getLine());
	System.out.print(":");
	System.out.print(lexer.getCharPos());
	System.out.print("] ");
	System.out.print(TokenNames.terminalNames[s.sym]);
	if (s.value != null)
	{
		System.out.print("( ");
		System.out.print(s.value);
		System.out.print(" )");
	}
	System.out.print("\n");
	return s; 
:};

/*************/
/* TERMINALS */
/*************/
terminal IF;
terminal EQ;
terminal DOT;
terminal PLUS;
terminal MINUS;
terminal TIMES;
terminal WHILE;
terminal DIVIDE;
terminal LPAREN;
terminal RPAREN;
terminal LBRACK;
terminal RBRACK;
terminal LBRACE;
terminal RBRACE;
terminal SEMICOLON;
terminal ASSIGN;
terminal RETURN;
terminal CLASS;
terminal EXTENDS;
terminal TYPE_INT;
terminal TYPE_STRING;
terminal TYPE_VOID;
terminal LT;
terminal GT;
terminal NIL;
terminal STRING;
terminal NEW;
terminal COMMA;
terminal ARRAY;


/*************/
/* TERMINALS */
/*************/
terminal Integer INT;
terminal String ID;

/*****************/
/* NON TERMINALS */
/*****************/
non terminal AST_EXP exp;
non terminal AST_VAR var;
non terminal AST_STMT stmt;
non terminal AST_STMT_LIST stmtList;
non terminal AST_PROGRAM program;
non terminal AST_DEC dec;
non terminal AST_DEC_LIST decList;
non terminal AST_VAR_DEC varDec;
non terminal AST_CLASS_DEC classDec;
non terminal AST_FUNC_DEC funcDec;
non terminal AST_NEW_EXP newExp;
non terminal AST_CFIELD cField;
non terminal AST_ARRAY_TYPEDEF arrayTypedef;
non terminal AST_PARM_LIST parmList;
non terminal AST_TYPE type;

/***********************/
/* OPERATOR PRECEDENCE */
/***********************/
precedence left PLUS;
precedence left MINUS;
precedence left TIMES;
precedence left DIVIDE;

/************************/
/* START WITH: stmtList */
/************************/
start with program;

/********************/
/* DERIVATION RULES */
/********************/

program     ::=     decList:dl              {: RESULT = new AST_PROGRM(dl);    :}
                    ;

decList     ::=     dec:d	decList:l		{: RESULT = new AST_DEC_LIST(d, l);    :}
                    | dec:d			    	{: RESULT = new AST_DEC_LIST(d, null); :}
                    ;

stmtList	::=		stmt:s	stmtList:l		{: RESULT = new AST_STMT_LIST(s,l);    :}
					| stmt:s				{: RESULT = new AST_STMT_LIST(s,null); :}
					;

var			::=		ID:name								{: RESULT = new AST_VAR_SIMPLE(name);       :}
					| var:v DOT ID:fieldName			{: RESULT = new AST_VAR_FIELD(v,fieldName); :} 
					| var:v LBRACK exp:e RBRACK			{: RESULT = new AST_VAR_SUBSCRIPT(v,e);     :} 
					;


dec         ::=     varDec:v                            {: RESULT = v; :}
                    | classDec:v                         {: RESULT = new AST_CLASS_DEC(v); :}
                    | funcDec:v                          {: RESULT = new AST_FUNC_DEC(v); :}
                    | arrayTypedef:v                     {: RESULT = new AST_ARRAY_TYPEDEF(v); :}
                    ;

stmt		::=		var:v ASSIGN exp:e SEMICOLON								{: RESULT = new AST_STMT_ASSIGN(v,e); :}
					| IF    LPAREN exp:cond RPAREN LBRACE stmtList:body RBRACE	{: RESULT = new AST_STMT_IF(   cond,body); :}
					| WHILE LPAREN exp:cond RPAREN LBRACE stmtList:body RBRACE	{: RESULT = new AST_STMT_WHILE(cond,body); :}
					| varDec:v                                                  {: RESULT = v; :}
					| var:v ASSIGN newExp:e SEMICOLON							{: RESULT = new AST_STMT_ASSIGN_NEW(v,e); :}
					| RETURN SEMICOLON                                          {: RESULT = new AST_STMT_RETURN(); :}
					| RETURN exp:e SEMICOLON                                    {: RESULT = new AST_STMT_RETURN_EXP(e); :}
					| ID:s LPAREN parmList:pl RPAREN SEMICOLON                 {: RESULT = new AST_STMT_FUNC(s, pl);:}
                    | var:v DOT ID:s LPAREN parmList:pl RPAREN SEMICOLON       {: RESULT = new AST_STMT_METHOD(v, s, pl);:}
					;

varDec      ::=     type:t ID:s                         {: RESULT = new AST_VAR_DECLER(t,s); :}
                    | type:t ID:s ASSIGN exp:e          {: RESULT = new AST_VAR_INT(t,s,e); :}
                    | type:t ID:s ASSIGN newExp:e       {: RESULT = new AST_VAR_NEW(t,s,e); :}
                    ;

funcDec      ::=     type:t ID:s LPAREN RPAREN LBRACE stmt:st stmtList:stl RBRACE  {: RESULT = new AST_FUNC_DECLER(t,s, st, stl); :}
                    | type:t ID:s LPAREN parmList:pl RPAREN LBRACE stmt:st stmtList:stl RBRACE  {: RESULT = new AST_FUNC_DECLER_PARML(t,s, st, stl, pl); :}
                    ;

classDec      ::=   CLASS ID:s LBRACE cField:cf stmtList:sl RBRACE {: RESULT = new AST_CLASS_DECLER(s, cf, sl); :}
                    | CLASS ID:s1 EXTENDS ID:s2 LBRACE cField:cf stmtList:sl RBRACE {: RESULT = new AST_CLASS_EXTENDS_DECLER(s1, s2, cf, sl); :}
                    ;

type        ::=     TYPE_INT                            {: RESULT = new AST_TYPE_WITHOUT_VALUE(Type.TYPE_INT); :}
                    | TYPE_STRING                         {: RESULT = new AST_TYPE_WITHOUT_VALUE(Type.TYPE_STRING); :}
                    | TYPE_VOID                           {: RESULT = new AST_TYPE_WITHOUT_VALUE(Type.TYPE_VOID); :}
                    | ID:s                                {: RESULT = new AST_TYPE_WITH_VALUE(s); :}
                    ;

exp			::=		INT:i								{: RESULT = new AST_EXP_INT(i);          :}
					| var:v								{: RESULT = new AST_EXP_VAR(v);          :}
					| LPAREN exp:e RPAREN               {: RESULT = new AST_EXP_PAREN(e);        :}
					| exp:e1 PLUS  exp:e2				{: RESULT = new AST_EXP_BINOP(e1, e2, Binop.PLUS);:}
					| exp:e1 MINUS exp:e2				{: RESULT = new AST_EXP_BINOP(e1, e2, Binop.MINUS);:}
					| exp:e1 TIMES exp:e2				{: RESULT = new AST_EXP_BINOP(e1, e2, Binop.TIMES);:}
					| exp:e1 DIVIDE exp:e2				{: RESULT = new AST_EXP_BINOP(e1, e2, Binop.DIVIDE);:}
					| exp:e1 LT exp:e2				    {: RESULT = new AST_EXP_BINOP(e1, e2, Binop.LT);:}
					| exp:e1 GT exp:e2				    {: RESULT = new AST_EXP_BINOP(e1, e2, Binop.GT);:}
					| exp:e1 EQ exp:e2				    {: RESULT = new AST_EXP_BINOP(e1, e2, Binop.EQ);:}
					| ID:s LPAREN parmList:pl RPAREN   {: RESULT = new AST_EXP_FUNC(s, pl);:}
					| var:v DOT ID:s LPAREN parmList:pl RPAREN {: RESULT = new AST_EXP_METHOD(v, s, pl);:}
					| MINUS INT:i						{: RESULT = new AST_EXP_INT(-i);          :}
					| NIL                               {: RESULT = new AST_EXP_NIL();            :}
					| STRING:s                          {: RESULT = new AST_EXP_STRING(s);        :}
					;

newExp		::=		NEW ID:s						    {: RESULT = new AST_NEW_EXP(s);          :}
                    | NEW ID:s LBRACK exp:e RBRACK		{: RESULT = new AST_NEW_EXP_WITH_VALUE(s,e);  :}
                    ;

cField      ::=     varDec:v                              {: RESULT = new AST_CFIELD_VAR_DEC(v);          :}
                    | funcDec:v                           {: RESULT = new AST_CFIELD_FUNC_DEC(v);          :}
                    ;

parmList   ::=     exp:p	COMMA parmList:pl		{: RESULT = new AST_PARM_LIST(p,pl);    :}
                    | exp:p				        {: RESULT = new AST_PARM_LIST(p,null); :}
                    ;

/*
int ::= //TODO;
*/

arrayTypedef   ::=     ARRAY ID:s EQ type:t LBRACK RBRACK SEMICOLON {: RESULT = new AST_ARRAY_TYPEDEF(s, t);    :}
                    ;